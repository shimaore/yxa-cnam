# $Id: Makefile.in 2758 2005-08-24 14:08:29Z ft $
#

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
DESTDIR = @DESTDIR@
SHELL = @SHELL@

confdir = @sysconfdir@
sslcertdir = @sslcertdir@
mnesiadir = @mnesiadir@
beamdir = @libdir@/yxa/ebin
includedir = @libdir@/yxa/include
sbindir = @sbindir@
exec_prefix=${prefix}
builddir = @builddir@

ERLC = @ERLC@
ERL = @ERL@

INSTALL = @INSTALL@
install_DATA = @INSTALL_DATA@
install_PROGRAM = @INSTALL_PROGRAM@

ebin_dir = ./ebin

mkinstalldirs = $(SHELL) $(top_srcdir)/scripts/mkinstalldirs

create_start_script = \
	sed -e "s!@PROGRAMNAME@!$@!" \
	    -e 's!@CONFIGDIR@!$(confdir)!' \
	    -e 's!@SSLCERTDIR@!$(sslcertdir)!' \
	    -e 's!@MNESIADIR@!$(mnesiadir)!' \
	    -e 's!@erl@!$(ERL)!' \
	    -e 's!@beamdir@!$(beamdir)!' < $(top_srcdir)/scripts/init.sh.in > $@.new && \
	chmod +x $@.new && \
	mv $@.new $@

SUBDIRS = \
	src \
	yaws/src

RECURSIVE_TARGETS = all-recursive install-recursive clean-recursive distclean-recursive doc-recursive packages-recursive

erl_FILES = \
	version.erl

beam_FILES = $(addprefix $(ebin_dir)/, $(erl_FILES:.erl=.beam))

start_FILES = \
	appserver \
	incomingproxy \
	outgoingproxy \
	pstnproxy \
	yxa-bootstrap

all: $(ebin_dir) $(beam_FILES) all-recursive $(start_FILES)

$(RECURSIVE_TARGETS):
	@target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	echo "Making $$target in $$subdir"; \
	(cd $$subdir && $(MAKE) $$target) || exit 1; \
	done

$(ebin_dir):
	$(mkinstalldirs) $(ebin_dir)

install: $(beam_FILES) $(start_FILES) install-recursive
	$(mkinstalldirs) $(DESTDIR)$(confdir)
	$(mkinstalldirs) $(DESTDIR)$(sslcertdir)
	$(mkinstalldirs) $(DESTDIR)$(mnesiadir)
	$(mkinstalldirs) $(DESTDIR)$(sbindir)
	$(mkinstalldirs) $(DESTDIR)$(beamdir)
	for p in $(beam_FILES); do \
	  $(install_DATA) $$p $(DESTDIR)$(beamdir)/$$f ; \
	done
	for p in $(start_FILES); do \
	  $(install_PROGRAM) $$p $(DESTDIR)$(sbindir)/$$f ; \
	done

packages:	all packages-recursive

distclean: clean distclean-recursive
	rm -f Makefile
	rm -f config.status
	rm -f config.log
	rm -f version.erl
	rm -rf doc/
	rm -rf $(ebin_dir)/

clean: clean-recursive
	rm -f core *.core *~
	rm -f *.beam newversion.erl.new version.erl.in
	rm -f *.o ktrace.out erl_crash.dump
	rm -f $(beam_FILES)
	rm -f $(start_FILES)

sslkey:
	@if [ -f $(DESTDIR)$(sslcertdir)/ssl.config ]; then \
		echo ""; \
		echo "You already have a $(DESTDIR)$(sslcertdir)/ssl.config file - "; \
		echo "aborting to not accidentally overwrite existing ssl keys"; \
		echo ""; \
		false; \
	    else \
		true; \
	fi
	$(mkinstalldirs) -m 700 $(DESTDIR)$(sslcertdir)
	cp $(srcdir)/ssl.config $(DESTDIR)$(sslcertdir)/ssl.config
	cd $(DESTDIR)$(sslcertdir) && openssl req -days 2002 -new -text -out cert.req -config ./ssl.config
	cd $(DESTDIR)$(sslcertdir) && openssl rsa -in privkey.pem -out cert.pem -passin pass:foobar
	cd $(DESTDIR)$(sslcertdir) && openssl req -days 2002 -x509 -in cert.req -text -key cert.pem -out cert.cert
	cat $(DESTDIR)$(sslcertdir)/cert.cert $(DESTDIR)$(sslcertdir)/cert.pem > $(DESTDIR)$(sslcertdir)/cert.comb

SUFFIXES = .c .o .hrl .beam .erl .boot .rel .app .app-in
.SUFFIXES:
.SUFFIXES: .c .o .hrl .beam .erl .boot .rel .app .app-in

$(ebin_dir)/%.beam:	%.erl
	$(ERLC) -o $(ebin_dir) -I$(srcdir) -I$(srcdir)/include/ -W +debug_info $<

$(start_FILES): $(top_srcdir)/scripts/init.sh.in $(builddir)/config.status

yxa-bootstrap:
	$(create_start_script)

incomingproxy: $(builddir)/src/incomingproxy.boot
	$(create_start_script)

pstnproxy: $(builddir)/src/pstnproxy.boot
	$(create_start_script)

appserver: $(builddir)/src/appserver.boot
	$(create_start_script)

outgoingproxy: $(builddir)/src/outgoingproxy.boot
	$(create_start_script)

test:
	echo "Making test in src/"; \
	(cd src/ && $(MAKE) test) || exit 1

covertest:
	echo "Making covertest in src/"; \
	(cd src/ && $(MAKE) covertest) || exit 1

xreftest: $(beam_FILES)
	echo "Making xreftest in src/"; \
	(cd src/ && $(MAKE) xreftest) || exit 1

doc: $(ebin_dir) doc-recursive
	mkdir -p doc/html/src
	cp $(srcdir)/doc-src/overview.edoc doc/html/
	echo "Making doc in src/"; \
	(cd src/ && $(MAKE) doc) || exit 1
	echo "Making doc in yaws/src/"; \
	(cd yaws/src/ && $(MAKE) doc) || exit 1
	# generate edoc overview in top doc/html/ directory
	$(ERL) -yxa_edoc_dir doc/html -pa $(ebin_dir) -noshell -run yxa_edoc run "" -run init stop
	# for the top level, we clean away everything but the non-frame page
	mv doc/html/overview-summary.html doc/html/index.html
	rm -f doc/html/stylesheet.css \
		doc/html/packages-frame.html \
		doc/html/modules-frame.html \
		doc/html/edoc-info \
		doc/html/overview.edoc
	@echo ""
	@echo "Documentation generated into doc/html/"
	@echo ""
