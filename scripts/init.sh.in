#!/bin/sh
#
# Script created from Yxa init.sh.in
#

PROGRAMNAME="@PROGRAMNAME@"
CONFIGDIR="@CONFIGDIR@"
SSLCERTDIR="@SSLCERTDIR@"
MNESIABASE="@MNESIADIR@"
beamdir="@beamdir@"
erl="@erl@"

myname=`basename $0`
if [ "x$myname" = "xyxa-bootstrap" ]; then
    is_bootstrap=1
else
    is_bootstrap=0
fi

usage()
{
    common_options="\
	-config File	use 'File.config' as config file
	-c_ssl File	use 'File' as Erlang distribution client certificate file
	-s_ssl File	use 'File' as Erlang distribution server certificate file
	-mnesiadir Dir	use 'Dir' as Mnesia directory
	-name Name	use 'Name' as Erlang node name
	-hostname Name	use 'Name' as hostname part of node-name
	-h		show usage
"

    case $is_bootstrap in
	1)
	    echo "Syntax: $0 [options]"
	    echo ""
	    echo "  Options :"
	    echo "	-replica M	bootstrap a replica with node M as master"
	    echo "$common_options"
	    echo ""
	    ;;
	0)
	    echo "Syntax: $0 [options] command"
	    echo ""
	    echo "  Options :"
	    echo "	-d		debug-mode, don't detach - implies 'start' command"
	    echo "$common_options"
	    echo ""
	    echo "  Commands :"
	    echo "	start		start server"
	    echo "	stop		stop running server"
	    echo "	status		get brief status of running server"
	    # these are not implemented yet
	    echo "	info [all]	get info about running server, add 'all' to get more info"
	    echo "	reload		reload configuration of running server, if possible"
	    echo "	restart		restart running server"
	    echo ""
	    ;;
    esac

    exit 1
}

# Calculate Erlang arguments
configpath="${CONFIGDIR}/${PROGRAMNAME}.config"

if [ "x$SSLCERTDIR" = "x" ]; then
    client_sslcertfile="$CONFIGDIR/yxa/cert.comb"
    server_sslcertfile="$client_sslcertfile"
else
    client_sslcertfile="$SSLCERTDIR/cert.comb"
    server_sslcertfile="$client_sslcertfile"
fi

command=""
command_arguments=""
detach="-detached"
replica=""
explicit_name=0
hostname=$(hostname)

if [ $is_bootstrap -eq 1 ]; then
    # yes, the default name should be incomingproxy when bootstrapping
    name="incomingproxy"
    command="bootstrap"
else
    name="$PROGRAMNAME"
    mnesiadir="$MNESIABASE/$PROGRAMNAME"
fi

exit_now=0
# parse command line options
while [ $# -gt 0 -a $exit_now -eq 0 ]
do
      arg=$1
      # complicated shift to not make picky sh's whine
      if [ "x$1" != "x" ]; then shift; else exit_now=1; fi

      case $arg in
	  -h)
	      usage
	      ;;
	  -config)
	      if [ "x$1" = "x" ]; then
		  echo "$0: '$arg' requires an argument"
		  exit 1
	      else
		  configpath="$1"
		  shift
	      fi
	      ;;
	  -c_ssl)
	      if [ "x$1" = "x" ]; then
		  echo "$0: '$arg' requires an argument"
		  exit 1
	      else
		  client_sslcertfile="$1"
		  shift
	      fi
	      ;;
	  -s_ssl)
	      if [ "x$1" = "x" ]; then
		  echo "$0: '$arg' requires an argument"
		  exit 1
	      else
		  server_sslcertfile="$1"
		  shift
	      fi
	      ;;
	  -mnesiadir)
	      if [ "x$1" = "x" ]; then
		  echo "$0: '$arg' requires an argument"
		  exit 1
	      else
		  mnesiadir="$1"
		  shift
	      fi
	      ;;
	  -d)
	      if [ $is_bootstrap -eq 1 ]; then
		  echo "$0: '-d' not applicable to bootstrapping, use '-h' for usage"
		  exit 1
	      fi

	      detach=""
	      command="start"
	      ;;
	  -replica)
	      # $arg only applicable to bootstrapping
	      if [ $is_bootstrap -ne 1 ]; then
		  echo "$0: '-replica' only applicable to bootstrapping, use '-h' for usage"
		  exit 1
	      fi

	      if [ "x$1" = "x" ]; then
		  echo "$0: '$arg' requires an argument"
		  exit 1
	      else
		  replica="$1"
		  shift
	      fi
	      ;;
	  -name)
	      if [ "x$1" = "x" ]; then
		  echo "$0: '$arg' requires an argument"
		  exit 1
	      else
		  name="$1"
		  explicit_name=1
		  shift
	      fi
	      ;;
	  -hostname)
	      if [ "x$1" = "x" ]; then
		  echo "$0: '$arg' requires an argument"
		  exit 1
	      else
		  hostname="$1"
		  shift
	      fi
	      ;;
	  start|stop|status|info|reload|restart)
	      # $arg not applicable to bootstrapping
	      if [ $is_bootstrap -eq 1 ]; then
		  echo "$0: '$arg' not applicable to bootstrapping, use '-h' for usage"
		  exit 1
	      fi

	      if [ "$arg" = "info" ]; then
		  # the 'info' command can take an optional argument
		  if [ "x$1" = "xall" ]; then
		      command_arguments="$1"
		      # complicated shift to not make picky sh's whine
		      if [ "x$1" != "x" ]; then shift; else exit_now=1; fi
		  fi
	      fi

	      # check that this was the last arg
	      if [ $# -ne 0 ]; then
		  echo "$0: command ('$arg') should come after any options"
		  exit 1
	      fi
	      if [ "x$command" != "x" -a "$command" != "$1" ]; then
		  echo "$0: command already set ('$command' != supplied '$1')"
		  exit 1
	      fi

	      command="$arg"
	      # complicated shift to not make picky sh's whine
	      if [ "x$1" != "x" ]; then shift; else exit_now=1; fi
	      ;;
	  *)
	      usage
      esac
done

if [ "x$command" = "x" ]; then
    usage
fi

if [ "x`echo $hostname | grep '\.'`" = "x" ]; then
    echo "WARNING: Your hostname ($hostname) is not fully qualified" 1>&2
fi

if [ $is_bootstrap -eq 1 -a "x$mnesiadir" = "x" ]; then
    # Adjust Mnesia dir path when bootstrapping so that it is the same as when
    # we run the real system
    mnesiadir="$MNESIABASE/${name}"
fi

if [ -f ${client_sslcertfile} ] ; then
    ssloptions="-proto_dist inet_ssl \
	-ssl_dist_opt client_certfile $client_sslcertfile \
	-ssl_dist_opt server_certfile $server_sslcertfile -ssl_dist_opt verify 2"
    boot_start_ssl="-boot start_ssl"
else
    echo "WARNING: starting without SSL - " \
	"missing certificate file ${sslcertfile}"
    ssloptions=""
    boot_start_ssl=""
fi

if [ "x$mnesiadir" = "x" ]; then
    mnesiaparameters=""
else
    if [ ! -d "$mnesiadir" ]; then
	if [ $is_bootstrap -ne 1 -a "x$name" = "xincomingproxy" ]; then
	    echo "$0: Mnesia directory '$mnesiadir' does not exist!"
	    echo ""
	    echo "You should probably bootstrap YXA before starting the 'incomingproxy' application,"
	    echo "see the README file. If 'incomingproxy' is not your database server node,"
	    echo "just create the directory manually."
	    echo ""
	    exit 1
	else
	    mkdir "$mnesiadir"
	    if [ ! -d "$mnesiadir" ]; then
		echo "$0: Could not create Mnesia directory '$mnesiadir'"
		exit 1
	    fi
	fi
    fi
    mnesiaparameters="-mnesia dir '"$mnesiadir"'"
fi

if [ -d "${PWD}/src/event_handler" -a -d "${PWD}/src/cpl" -a -d "${PWD}/ebin" ]; then
    # we must be running from the build directory, add path
    # to the compiled modules to the code search path
    EXTRA_ERL_ARGUMENTS="${EXTRA_ERL_ARGUMENTS} -pa ./ebin"
fi

if [ $is_bootstrap -eq 1 ]; then
    if [ ! -d "$mnesiadir" ]; then
	echo "Creating Mnesia directory '$mnesiadir'"
	mkdir "$mnesiadir"
    fi

    if [ ! -d "$mnesiadir" ]; then
	echo "Failed creating Mnesia directory!"
	echo ""
	exit 1
    fi

    if [ "x$replica" != "x" ]; then
	${erl} $boot_start_ssl -pz ${beamdir} \
	    $EXTRA_ERL_ARGUMENTS \
	    -name $name \
	    $ssloptions \
	    $mnesiaparameters \
	    -noshell \
	    -run bootstrap replica "$replica" \
	    -run init stop
    else
	${erl} -pz ${beamdir} \
	    $EXTRA_ERL_ARGUMENTS \
	    -name $name \
	    -noshell $mnesiaparameters \
	    -run bootstrap start \
	    -run init stop
    fi
else
    if [ ! -r "${configpath}" ]; then
	echo "$0: Configuration file '${configpath}' not found or not readable"
	exit 1
    fi

    case $command in
	start)
	    dir="`dirname $0`"
	    if [ -f "${dir}/${PROGRAMNAME}.boot" ]; then
		bootfile="${dir}/${PROGRAMNAME}"
	    else
		if [ -f "${dir}/src/${PROGRAMNAME}.boot" ]; then
		    bootfile="${dir}/src/${PROGRAMNAME}"
		else
		    if [ -f "${beamdir}/${PROGRAMNAME}.boot" ]; then
			bootfile="${beamdir}/$PROGRAMNAME"
		    else
			echo "$0: No boot file for application '${PROGRAMNAME}' found!"
			exit 1
		    fi
		fi
	    fi
	    ${erl} -boot "$bootfile" -pz ${beamdir} \
		$EXTRA_ERL_ARGUMENTS \
		-name $name \
		-yxa_config $configpath \
		$ssloptions \
		$mnesiaparameters $detach
	    ;;
	stop|status|info|reload|restart)
	    node="${name}@${hostname}"
	    if [ $explicit_name -eq 0 ]; then
	        # include pid ($$) in node name used here since contact with the running
	        # node could otherwise fail for consecutive commands executed rapidly
		name="${name}_ctl_$$"
	    fi

	    ${erl} $boot_start_ssl -pz ${beamdir} \
		$EXTRA_ERL_ARGUMENTS \
		-name "$name" \
		$ssloptions \
		-hidden \
		-noshell \
		-s yxa_ctl -extra $node $command $command_arguments
	    ;;
	*)
	    echo "$0: command '$command' not implemented yet"
	    exit 1
	    ;;
    esac
fi
