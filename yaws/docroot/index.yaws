<erl>
%%%-------------------------------------------------------------------
%%% File    : index.yaws
%%% Author  : Fredrik Thulin <ft@it.su.se>
%%% Descrip.: Yaws SSI index page.
%%%
%%% Created : 27 May 2005 by Fredrik Thulin <ft@it.su.se>
%%%-------------------------------------------------------------------


%%====================================================================
%% Yaws entry point
%%====================================================================
out(A) ->
    %% necessary to not make our build process depend on Yaws include files
    put({yxa_yaws_util, docroot}, filename:dirname(A#arg.fullpath)),
    put({yxa_yaws_util, method}, (A#arg.req)#http_request.method),

    try out2() of
	Res ->
	    yxa_yaws_util:script_output(Res)
    catch
	throw: {error, E} when is_list(E) ->
	    Error = yxa_yaws_util:error(E),
	    yxa_yaws_util:script_output(Error)
    end.


%%====================================================================
%% Internal functions
%%====================================================================


%%--------------------------------------------------------------------
%% Function: out2()
%% Descrip.: Produce a list of currently running nodes, and links to
%%           some other scripts.
%% Returns : HTML = term(), Yaws html data
%%--------------------------------------------------------------------
out2() ->
    Incomingproxy = yxa_yaws_util:get_yxa_application_node(),

    case get_nodes(Incomingproxy) of
	error ->
	    throw({error, "Could not contact node " ++ Incomingproxy});
	Nodes when is_list(Nodes) ->
	    %% for each node that Incomingproxy knew about, get the current uptime

	    NodeLinks = format_nodes(Nodes),
	    NodeURL = yaws_api:url_encode(Incomingproxy),
	    {ul, [], [
		      {p, [], [
			       {h3, [], "Servers currently running :"},
			       NodeLinks
			      ]},
		      {p, [], []},
		      {p, [], []},
		      {p, [], [
			       {a, [{href, "userdb.yaws?node=" ++ NodeURL}],
				"Mnesia user database management"}
			      ]},
		      {p, [], [
			       {a, [{href, "locationdb.yaws?node=" ++ NodeURL}],
				"Location database management"}
			      ]},
		      {p, [], [
			       {a, [{href, "regexp.yaws?node=" ++ NodeURL}],
				"Regexp-route management"}
			      ]},
		      {p, [], [
			       {a, [{href, "mnesiamgmt.yaws?node=" ++ NodeURL}],
				"Mnesia node management"}
			      ]}
		     ]}
    end.

%%--------------------------------------------------------------------
%% Function: get_nodes(Incomingproxy)
%%           Incomingproxy = string()
%% Descrip.: Query the Incomingproxy node and get a list of other
%%           nodes in the system. Return a list of those nodes, minus
%%           ourselves.
%% Returns : Nodes = list() of atom()
%%--------------------------------------------------------------------
get_nodes(Incomingproxy) when is_list(Incomingproxy) ->
    A = list_to_atom(Incomingproxy),
    case rpc:call(A, erlang, nodes, []) of
	{badrpc, nodedown} ->
	    error;
	RemoteNodes when is_list(RemoteNodes) ->
	    Nodes = lists:usort([A | RemoteNodes]),
	    WithoutMe = Nodes -- [node()],
	    WithoutMe
    end.

%%--------------------------------------------------------------------
%% Function: format_nodes(Nodes)
%%           Nodes = list() of string()
%% Descrip.: EHTML format a list of running nodes, with links to node-
%%           specific pages for each one.
%% Returns : HTML = term(), Yaws html data
%%--------------------------------------------------------------------
format_nodes(Nodes) when is_list(Nodes) ->
    TrFun = fun(N) ->
		    NodeStr = atom_to_list(N),
		    InfoLink = "node_info.yaws?node=" ++ yaws_api:url_encode(NodeStr),
		    %%CfgLink = "node_cfg.yaws?node=" ++ yaws_api:url_encode(NodeStr),
		    {tr, [], [
			      {td, [], [{li, [], NodeStr}]},
			      {td, [], ["[",
					{a, [{href, InfoLink}], "info"},
					%%"&nbsp;|&nbsp;",
					%%{a, [{href, CfgLink}], "configure"},
					"]"
				       ]}
			      ]}
	    end,

    {table, [{border, 0}], [
			    lists:map(TrFun, Nodes)
			   ]}.
	     

</erl>

<erl>
out(A) -> yaws_api:ssi(filename:dirname(A#arg.fullpath), ["/BOTTOM"]).
</erl>
