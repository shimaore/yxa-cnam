<erl>
%%%-------------------------------------------------------------------
%%% File    : userdb_delete_address.yaws
%%% Author  : Fredrik Thulin <ft@it.su.se>
%%% Descrip.: Yaws SSI for deleting an address from a user.
%%%
%%% Created : 02 Jun 2005 by Fredrik Thulin <ft@it.su.se>
%%%-------------------------------------------------------------------

%%--------------------------------------------------------------------
%% Macros
%%--------------------------------------------------------------------
-define(GET_VAR(TheVarName), yxa_yaws_util:get_var(A, TheVarName)).


%%====================================================================
%% Yaws entry point
%%====================================================================

out(A) ->
    %% necessary to not make our build process depend on Yaws include files
    put({yxa_yaws_util, docroot}, filename:dirname(A#arg.fullpath)),
    put({yxa_yaws_util, method}, (A#arg.req)#http_request.method),

    try out2(A,
	    ?GET_VAR("node"),
	    ?GET_VAR("user"),
	    ?GET_VAR("address")) of
	Res ->
	    yxa_yaws_util:script_output(Res)
    catch
	throw: {error, E} when is_list(E) ->
	    Error = yxa_yaws_util:error(E),
	    yxa_yaws_util:script_output(Error)
    end.


%%====================================================================
%% Internal functions
%%====================================================================


%%--------------------------------------------------------------------
%% Function: out2(A, {ok, NodeStr})
%%           A       = term(), Yaws request data
%%           NodeStr = string(), name of node we are to talk with
%% Descrip.: Top level output function. Output header and catch
%%           errors, if any.
%% Returns : HTML = term(), Yaws html data
%%--------------------------------------------------------------------
out2(A, {ok, NodeStr}, {ok, Username}, {ok, Address}) when is_list(NodeStr), is_list(Username), is_list(Address) ->
    Node = list_to_atom(NodeStr),
    Confirmed = case ?GET_VAR("confirm_userdb_delete_address") of
		    {ok, "Confirm"} ->
			delete_address(Node, Username, Address, NodeStr);
		    _ ->
			needs_confirmation(Username, Address, NodeStr)
		end;
out2(_, _, _, _) ->
    throw({error, "Invalid node, user or address specified"}).


%%--------------------------------------------------------------------
%% Function: needs_confirmation(User, Address, NodeStr)
%%           User    = string(), username
%%           Address = string(), address in question
%%           NodeStr = string(), name of node we are to talk with
%% Descrip.: Output a small form asking for confirmation to delete
%%           Address from User.
%% Returns : HTML = term(), Yaws html data
%%--------------------------------------------------------------------
needs_confirmation(User, Address, NodeStr) when is_list(User), is_list(Address), is_list(NodeStr) ->
    Text = {p, [], [
		    {strong, [], {font, [{color, red}], ["Delete"]}},
		    " address ",
		    {strong, [], [Address]},
		    " from user ",
		    {strong, [], [User]},
		    "?"
		   ]},
    Form = {form, [], [
		       yxa_yaws_util:hidden_inputs([
						    {"node", NodeStr},
						    {"user", User},
						    {"address", Address}
						   ]),

		       {input, [{type, submit},
				{name, "confirm_userdb_delete_address"},
				{value, "Confirm"}
			       ]}
		      ]},
    [{p, [], []}, Text, {p, [], Form}].


%%--------------------------------------------------------------------
%% Function: delete_address(Node, User, Address, NodeStr)
%%           Node    = atom(), node we are to talk with
%%           User    = string(), username
%%           Address = string(), address in question
%%           NodeStr = string(), name of node we are to talk with
%% Descrip.: Delete Address from User, then redirect browser to user
%%           modify page (because that _is_ where the client came
%%           from, right?)
%% Returns : {redirect, URL} | HTML = term(), Yaws html data
%%           URL = string()
%%--------------------------------------------------------------------
delete_address(Node, User, Address, NodeStr) when is_atom(Node), is_list(User), is_list(Address),
						  is_list(NodeStr) ->
    Addresses = yxa_yaws_util:get_user_addresses(User, Node),
    case lists:member(Address, Addresses) of
	true ->
	    case rpc:call(Node, phone, set_user_numbers, [User, Addresses -- [Address]]) of
		{atomic, ok} ->
		    URL = "userdb_modify.yaws?" ++
			"node=" ++ yaws_api:url_encode(NodeStr) ++
			"&user=" ++ yaws_api:url_encode(User),
		    {redirect, URL};
		E ->
		    Msg = io_lib:format("Failed deleting address ~p from user ~p (node ~p) : ~p",
					[Address, User, Node, E]),
		    throw({error, Msg})
	    end;
	false ->
	    Msg = io_lib:format("Address ~p not registered for user ~p", [Address, User]),
	    throw({error, Msg})
    end.


</erl>

<erl>
out(A) -> yaws_api:ssi(filename:dirname(A#arg.fullpath), ["/BOTTOM"]).
</erl>
